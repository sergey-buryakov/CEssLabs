#include <iostream>

#include <string>

using namespace std;

class Fraction {
public:
	Fraction(int numerator, int denominator);
	string toString();
	double toDouble();
	Fraction plus(Fraction that);
	Fraction minus(Fraction that);
	Fraction times(Fraction that);
	Fraction by(Fraction that);
private:
	int numerator;
	int denominator;
	void reduce();
};

void Fraction::reduce() {
	int a;
	if (this->numerator < 0)
		a = -this->numerator;
	else
		a = this->numerator;
	int b = this->denominator;
	while (a != 0 && b != 0) {
		if (a > b)
			a %= b;
		else
			b %= a;
	}
	this->numerator /= (a + b);
	this->denominator /= (a + b);
}
Fraction Fraction::times(Fraction that)
{
	int num = this->numerator * that.numerator;
	int den = this->denominator * that.denominator;
	Fraction result(num, den);
	result.reduce();
	// we could call result.reduce() here
	// or use it just before it is necessary
	return result;
	// implement other Fraction methods
}
Fraction Fraction::by(Fraction that)
{
	int num = this->numerator * that.denominator;
	int den = this->denominator * that.numerator;
	Fraction result(num, den);
	result.reduce();

	// we could call result.reduce() here
	// or use it just before it is necessary
	return result;
	// implement other Fraction methods
}
Fraction Fraction::plus(Fraction that)
{
	int den = this->denominator * that.denominator;
	int num = that.denominator*this->numerator + that.numerator*this->denominator;

	Fraction result(num, den);
	result.reduce();
	// we could call result.reduce() here
	// or use it just before it is necessary
	return result;
	// implement other Fraction methods
}
Fraction Fraction::minus(Fraction that)
{
	int den = this->denominator * that.denominator;
	int num = that.denominator*this->numerator - that.numerator*this->denominator;
	Fraction result(num, den);
	result.reduce();
	// we could call result.reduce() here
	// or use it just before it is necessary
	return result;
	// implement other Fraction methods
}
// implement Fraction methods
Fraction::Fraction(int numerator, int denominator) {


	if (denominator == 0) {
		this->denominator = 1;
		this->numerator = numerator;
	}
	else if (denominator < 0) {
		this->denominator = -denominator;
		this->numerator = -numerator;
	}
	else {
		this->denominator = denominator;
		this->numerator = numerator;
	}

}
string Fraction::toString() {
	if (numerator*denominator < 0)
	{
		if (numerator%denominator == 0)
			return to_string(numerator / denominator);
		if (numerator / denominator == 0)
			return to_string(numerator) + (string)"/" + to_string(denominator);
		return to_string(numerator / denominator) + (string)" " + to_string(-(numerator%denominator)) + (string) "/" + to_string(denominator);
	}
	if (numerator%denominator == 0)
		return to_string(numerator / denominator);
	if (numerator / denominator == 0)
		return to_string(numerator) + (string)"/" + to_string(denominator);
	return to_string(numerator / denominator) + (string)" " + to_string(numerator%denominator) + (string) "/" + to_string(denominator);


}
double Fraction::toDouble() {
	return float(numerator) / denominator;
}
int main(void) {
	int num, den;
	std::string input = "", i2;
	getline(cin, input);


	// parse input and get numerator and denominator
	num = atoi((input.substr(0, input.find("/"))).c_str());
	den = atoi((input.substr(input.find("/") + 1)).c_str());
	Fraction fraction(num, den);
	getline(cin, i2);

	num = atoi((i2.substr(0, i2.find("/"))).c_str());
	den = atoi((i2.substr(i2.find("/") + 1)).c_str());
	Fraction fraction2(num, den);
	cout << fraction.toString() << " + " << fraction2.toString() << " = " << fraction.plus(fraction2).toString() << endl;;
	cout << fraction.toString() << " - " << fraction2.toString() << " = " << fraction.minus(fraction2).toString() << endl;
	cout << fraction.toString() << " * " << fraction2.toString() << " = " << fraction.times(fraction2).toString() << endl;
	cout << fraction.toString() << " / " << fraction2.toString() << " = " << fraction.by(fraction2).toString() << endl;
	return 0;
}
